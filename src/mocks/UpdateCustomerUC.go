// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	commondtos "lucio.com/order-service/src/domain/common/dtos"

	dtos "lucio.com/order-service/src/domain/customer/dtos"

	entities "lucio.com/order-service/src/domain/customer/entities"

	mock "github.com/stretchr/testify/mock"
)

// UpdateCustomerUC is an autogenerated mock type for the UpdateCustomerUC type
type UpdateCustomerUC struct {
	mock.Mock
}

// Execute provides a mock function with given fields: updateCustomerDTO
func (_m *UpdateCustomerUC) Execute(updateCustomerDTO entities.Customer) (*dtos.UpdatedCustomerResponse, *commondtos.CustomError) {
	ret := _m.Called(updateCustomerDTO)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *dtos.UpdatedCustomerResponse
	var r1 *commondtos.CustomError
	if rf, ok := ret.Get(0).(func(entities.Customer) (*dtos.UpdatedCustomerResponse, *commondtos.CustomError)); ok {
		return rf(updateCustomerDTO)
	}
	if rf, ok := ret.Get(0).(func(entities.Customer) *dtos.UpdatedCustomerResponse); ok {
		r0 = rf(updateCustomerDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.UpdatedCustomerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Customer) *commondtos.CustomError); ok {
		r1 = rf(updateCustomerDTO)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*commondtos.CustomError)
		}
	}

	return r0, r1
}

// NewUpdateCustomerUC creates a new instance of UpdateCustomerUC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateCustomerUC(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateCustomerUC {
	mock := &UpdateCustomerUC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
