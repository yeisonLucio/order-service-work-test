// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dto "lucio.com/order-service/src/dto"

	models "lucio.com/order-service/src/models"
)

// WorkOrderRepository is an autogenerated mock type for the WorkOrderRepository type
type WorkOrderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: workOrder
func (_m *WorkOrderRepository) Create(workOrder models.WorkOrder) error {
	ret := _m.Called(workOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.WorkOrder) error); ok {
		r0 = rf(workOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ID
func (_m *WorkOrderRepository) DeleteByID(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ID
func (_m *WorkOrderRepository) FindByID(ID string) (*models.WorkOrder, error) {
	ret := _m.Called(ID)

	var r0 *models.WorkOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.WorkOrder, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.WorkOrder); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdWithCustomer provides a mock function with given fields: ID
func (_m *WorkOrderRepository) FindByIdWithCustomer(ID string) (*dto.WorkOrderDTO, error) {
	ret := _m.Called(ID)

	var r0 *dto.WorkOrderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.WorkOrderDTO, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.WorkOrderDTO); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.WorkOrderDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: filters
func (_m *WorkOrderRepository) GetAll(filters dto.WorkOrderFilters) []dto.WorkOrderDTO {
	ret := _m.Called(filters)

	var r0 []dto.WorkOrderDTO
	if rf, ok := ret.Get(0).(func(dto.WorkOrderFilters) []dto.WorkOrderDTO); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.WorkOrderDTO)
		}
	}

	return r0
}

// GetByCustomerID provides a mock function with given fields: customerID
func (_m *WorkOrderRepository) GetByCustomerID(customerID string) []dto.WorkOrderDTO {
	ret := _m.Called(customerID)

	var r0 []dto.WorkOrderDTO
	if rf, ok := ret.Get(0).(func(string) []dto.WorkOrderDTO); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.WorkOrderDTO)
		}
	}

	return r0
}

// IsTheFirstOrder provides a mock function with given fields: WorkOrderID, customerID
func (_m *WorkOrderRepository) IsTheFirstOrder(WorkOrderID string, customerID string) bool {
	ret := _m.Called(WorkOrderID, customerID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(WorkOrderID, customerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Save provides a mock function with given fields: workOrder
func (_m *WorkOrderRepository) Save(workOrder *models.WorkOrder) error {
	ret := _m.Called(workOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.WorkOrder) error); ok {
		r0 = rf(workOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWorkOrderRepository creates a new instance of WorkOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkOrderRepository {
	mock := &WorkOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
