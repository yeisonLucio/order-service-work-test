// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	dtos "lucio.com/order-service/src/domain/common/dtos"
	entities "lucio.com/order-service/src/domain/workorder/entities"

	mock "github.com/stretchr/testify/mock"

	workorderdtos "lucio.com/order-service/src/domain/workorder/dtos"
)

// WorkOrderRepository is an autogenerated mock type for the WorkOrderRepository type
type WorkOrderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: workOrder
func (_m *WorkOrderRepository) Create(workOrder *entities.WorkOrder) *dtos.CustomError {
	ret := _m.Called(workOrder)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dtos.CustomError
	if rf, ok := ret.Get(0).(func(*entities.WorkOrder) *dtos.CustomError); ok {
		r0 = rf(workOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CustomError)
		}
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ID
func (_m *WorkOrderRepository) DeleteByID(ID string) *dtos.CustomError {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 *dtos.CustomError
	if rf, ok := ret.Get(0).(func(string) *dtos.CustomError); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CustomError)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: ID
func (_m *WorkOrderRepository) FindByID(ID string) (*entities.WorkOrder, *dtos.CustomError) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.WorkOrder
	var r1 *dtos.CustomError
	if rf, ok := ret.Get(0).(func(string) (*entities.WorkOrder, *dtos.CustomError)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.WorkOrder); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.WorkOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *dtos.CustomError); ok {
		r1 = rf(ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dtos.CustomError)
		}
	}

	return r0, r1
}

// GetFiltered provides a mock function with given fields: filters
func (_m *WorkOrderRepository) GetFiltered(filters workorderdtos.WorkOrderFilters) []*workorderdtos.WorkOrder {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetFiltered")
	}

	var r0 []*workorderdtos.WorkOrder
	if rf, ok := ret.Get(0).(func(workorderdtos.WorkOrderFilters) []*workorderdtos.WorkOrder); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workorderdtos.WorkOrder)
		}
	}

	return r0
}

// IsTheFirstOrder provides a mock function with given fields: customerID
func (_m *WorkOrderRepository) IsTheFirstOrder(customerID string) bool {
	ret := _m.Called(customerID)

	if len(ret) == 0 {
		panic("no return value specified for IsTheFirstOrder")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Save provides a mock function with given fields: workOrder
func (_m *WorkOrderRepository) Save(workOrder *entities.WorkOrder) *dtos.CustomError {
	ret := _m.Called(workOrder)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *dtos.CustomError
	if rf, ok := ret.Get(0).(func(*entities.WorkOrder) *dtos.CustomError); ok {
		r0 = rf(workOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CustomError)
		}
	}

	return r0
}

// NewWorkOrderRepository creates a new instance of WorkOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkOrderRepository {
	mock := &WorkOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
