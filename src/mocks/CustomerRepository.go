// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dto "lucio.com/order-service/src/dto"

	models "lucio.com/order-service/src/models"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: customer
func (_m *CustomerRepository) Create(customer models.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ID
func (_m *CustomerRepository) DeleteByID(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ID
func (_m *CustomerRepository) FindByID(ID string) (*models.Customer, error) {
	ret := _m.Called(ID)

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Customer, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Customer); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActives provides a mock function with given fields:
func (_m *CustomerRepository) GetActives() []dto.CustomerDTO {
	ret := _m.Called()

	var r0 []dto.CustomerDTO
	if rf, ok := ret.Get(0).(func() []dto.CustomerDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CustomerDTO)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: ID
func (_m *CustomerRepository) GetByID(ID string) (*dto.CustomerDTO, error) {
	ret := _m.Called(ID)

	var r0 *dto.CustomerDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.CustomerDTO, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.CustomerDTO); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CustomerDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: customer
func (_m *CustomerRepository) Save(customer *models.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
