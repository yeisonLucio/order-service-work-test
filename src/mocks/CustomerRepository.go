// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	dtos "lucio.com/order-service/src/domain/common/dtos"
	entities "lucio.com/order-service/src/domain/customer/entities"

	mock "github.com/stretchr/testify/mock"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: customer
func (_m *CustomerRepository) Create(customer *entities.Customer) *dtos.CustomError {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dtos.CustomError
	if rf, ok := ret.Get(0).(func(*entities.Customer) *dtos.CustomError); ok {
		r0 = rf(customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CustomError)
		}
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ID
func (_m *CustomerRepository) DeleteByID(ID string) *dtos.CustomError {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 *dtos.CustomError
	if rf, ok := ret.Get(0).(func(string) *dtos.CustomError); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CustomError)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: ID
func (_m *CustomerRepository) FindByID(ID string) (*entities.Customer, *dtos.CustomError) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.Customer
	var r1 *dtos.CustomError
	if rf, ok := ret.Get(0).(func(string) (*entities.Customer, *dtos.CustomError)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Customer); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *dtos.CustomError); ok {
		r1 = rf(ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dtos.CustomError)
		}
	}

	return r0, r1
}

// GetActives provides a mock function with given fields:
func (_m *CustomerRepository) GetActives() []entities.Customer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActives")
	}

	var r0 []entities.Customer
	if rf, ok := ret.Get(0).(func() []entities.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customer)
		}
	}

	return r0
}

// Save provides a mock function with given fields: customer
func (_m *CustomerRepository) Save(customer *entities.Customer) *dtos.CustomError {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *dtos.CustomError
	if rf, ok := ret.Get(0).(func(*entities.Customer) *dtos.CustomError); ok {
		r0 = rf(customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CustomError)
		}
	}

	return r0
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
